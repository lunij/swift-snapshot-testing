name: CI

on:
  push:

jobs:
  macos:
    strategy:
      matrix:
        include:
          - macos: "13"
            xcode: "14.3.1"
            swift: "5.8.1"
          - macos: "14"
            xcode: "15.4"
            swift: "5.10"

    name: macOS ${{ matrix.macos }}, Xcode ${{ matrix.xcode }}, Swift ${{ matrix.swift }}
    runs-on: macos-${{ matrix.macos }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode ${{ matrix.xcode }}
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
      - name: Run tests
        id: run-tests
        run: make test-macos
      - name: Zip XCResult
        id: zip-xcresult
        if: failure() && steps.run-tests.conclusion == 'failure'
        run: cd .xcresults; zip -r xcresult-macos.zip macos.xcresult
      - name: Upload XCResult
        if: failure() && steps.zip-xcresult.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: xcresult-macos${{ matrix.macos }}.zip
          path: .xcresults/xcresult-macos.zip

  ios:
    strategy:
      matrix:
        include:
          - ios: "16.4"
            macos: "13"
            xcode: "14.3.1"
            swift: "5.8.1"
          - ios: "17.5"
            macos: "14"
            xcode: "15.4"
            swift: "5.10"

    name: iOS ${{ matrix.ios }}, macOS ${{ matrix.macos }}, Xcode ${{ matrix.xcode }}, Swift ${{ matrix.swift }}
    runs-on: macos-${{ matrix.macos }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode ${{ matrix.xcode }}
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
      - name: Run tests
        id: run-tests
        run: make test-ios IOS_VERSION="${{ matrix.ios }}"
      - name: Zip XCResult
        id: zip-xcresult
        if: failure() && steps.run-tests.conclusion == 'failure'
        run: cd .xcresults; zip -r xcresult-ios.zip ios.xcresult
      - name: Upload XCResult
        if: failure() && steps.zip-xcresult.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: xcresult-ios${{ matrix.ios }}.zip
          path: .xcresults/xcresult-ios.zip

  tvos:
    strategy:
      matrix:
        include:
          - tvos: "16.4"
            macos: "13"
            xcode: "14.3.1"
            swift: "5.8.1"
          - tvos: "17.5"
            macos: "14"
            xcode: "15.4"
            swift: "5.10"

    name: tvOS ${{ matrix.tvos }}, macOS ${{ matrix.macos }}, Xcode ${{ matrix.xcode }}, Swift ${{ matrix.swift }}
    runs-on: macos-${{ matrix.macos }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode ${{ matrix.xcode }}
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
      - name: Run tests
        id: run-tests
        run: make test-tvos TVOS_VERSION="${{ matrix.tvos }}"
      - name: Zip XCResult
        id: zip-xcresult
        if: failure() && steps.run-tests.conclusion == 'failure'
        run: cd .xcresults; zip -r xcresult-tvos.zip tvos.xcresult
      - name: Upload XCResult
        if: failure() && steps.zip-xcresult.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: xcresult-tvos${{ matrix.tvos }}.zip
          path: .xcresults/xcresult-tvos.zip

  visionos:
    if: false # GitHub Actions is timing out with the Apple Vision Pro Simulator
    strategy:
      matrix:
        include:
          - visionos: "1.2"
            macos: "14"
            xcode: "15.4"
            swift: "5.10"

    name: visionOS ${{ matrix.visionos }}, macOS ${{ matrix.macos }}, Xcode ${{ matrix.xcode }}, Swift ${{ matrix.swift }}
    runs-on: macos-${{ matrix.macos }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode ${{ matrix.xcode }}
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
      - name: Run tests
        id: run-tests
        run: make test-visionos VISIONOS_VERSION="${{ matrix.visionos }}"
      - name: Zip XCResult
        id: zip-xcresult
        if: failure() && steps.run-tests.conclusion == 'failure'
        run: cd .xcresults; zip -r xcresult-visionos.zip visionos.xcresult
      - name: Upload XCResult
        if: failure() && steps.zip-xcresult.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: xcresult-visionos${{ matrix.visionos }}.zip
          path: .xcresults/xcresult-visionos.zip

  ubuntu:
    strategy:
      matrix:
        swift:
          - "5.8.1"

    name: Ubuntu (Swift ${{ matrix.swift }})
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift }}
      - uses: actions/checkout@v4
      - run: swift test

  windows:
    strategy:
      matrix:
        swift:
          - "5.9.1"

    name: Windows (Swift ${{ matrix.swift }})
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: compnerd/gha-setup-swift@main
        with:
          branch: swift-${{ matrix.swift }}-release
          tag: ${{ matrix.swift }}-RELEASE

      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v4
      - run: swift build
      - run: swift test
